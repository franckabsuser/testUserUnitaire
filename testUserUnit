const { MongoMemoryServer } = require('mongodb-memory-server');
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
const { User } = require('../models/UserModels');

let mongoServer;

beforeAll(async () => {
    mongoServer = await MongoMemoryServer.create();
    const uri = mongoServer.getUri();
    await mongoose.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true });
});

afterAll(async () => {
    await mongoose.disconnect();
    await mongoServer.stop();
});

beforeEach(async () => {
    await User.deleteMany({});
});

describe('User Model', () => {
    it('should create a new user', async () => {
        const hashedPassword = await bcrypt.hash('password123', 10);

        const user = new User({
            email: 'john.doe@example.com',
            nameAndFirstName: 'John Doe',
            phone: '1234567890',
            password: hashedPassword,
        });

        const savedUser = await user.save();

        expect(savedUser._id).toBeDefined();
        expect(savedUser.email).toBe('john.doe@example.com');
        expect(savedUser.nameAndFirstName).toBe('John Doe');
    });

    it('should validate password', async () => {
        const hashedPassword = await bcrypt.hash('password123', 10);

        const user = new User({
            email: 'john.doe@example.com',
            nameAndFirstName: 'John Doe',
            phone: '1234567890',
            password: hashedPassword,
        });

        await user.save();

        const isValid = await user.isValidPassword('password123');
        expect(isValid).toBe(true);
    });

    it('should not validate incorrect password', async () => {
        const hashedPassword = await bcrypt.hash('password123', 10);

        const user = new User({
            email: 'john.doe@example.com',
            nameAndFirstName: 'John Doe',
            phone: '1234567890',
            password: hashedPassword,
        });

        await user.save();

        const isValid = await user.isValidPassword('wrongpassword');
        expect(isValid).toBe(false);
    });

    it('should find user by email', async () => {
        const hashedPassword = await bcrypt.hash('password123', 10);

        const user = new User({
            email: 'john.doe@example.com',
            nameAndFirstName: 'John Doe',
            phone: '1234567890',
            password: hashedPassword,
        });

        await user.save();

        const foundUser = await User.findByEmail('john.doe@example.com');
        expect(foundUser).toBeDefined();
        expect(foundUser.email).toBe('john.doe@example.com');
    });
});
